#lang racket/base

(require rackunit
         "../../../numerics/linear/svd.rkt"
         "../../../numerics/linear/lu.rkt"
         "../../../kernel-intr.rkt"
         )


(define the-tests
  (test-suite
   "numerics/linear/svd"
   (test-case
    "Test case from book"
    (define a 
      (array->matrix #( #( 1  6 11 )
                        #( 2  7 12 )
                        #( 3  8 13 )
                        #( 4  9 14 )
                        #( 5 10 15 ) )))
    (check-within (svd a list)
                  (list (array->matrix #(#(-.35455705703768087 -.6886866437682524 .5623498172874758)
                                         #(-.39869636999883223 -.3755545293958711 -.6404098216452332)
                                         #(-.4428356829599836 -.06242241502349071 4.3232194451219827e-4)
                                         #(-.48697499592113497 .2507096993488898 -.32903444810323323)
                                         #(-.5311143088822865 .5638418137212697 .40666213051647754)))
                        (array->matrix #(#(35.127223333574676 0 0)
                                         #(0 2.4653966969165197 0)
                                         #(0 0 2.839772892390358e-15)))
                        (array->matrix #(#(-.201664911192694 .8903171327830188 .4082482904638638)
                                         #(-.5168305013923045 .2573316268240516 -.816496580927726)
                                         #(-.8319960915919149 -.3756538791349179 .40824829046386263)))
                    #(35.127223333574676 2.4653966969165197 2.839772892390358e-15))
                  1e-15))
   (test-case
    "Golub and Reinsch"
    ;;; From Golub and Reinsch in Wilkinson&Reinsch Handbook for Automatic
    ;;; Computation -- Linear Algebra Vol II, p.150.
    (define a
      (m:generate 20 21
                  (lambda (i j)
                    (cond ((> i j)  0.0)
                          ((= i j)  (- 20.0 i))
                          ((< i j) -1.0)))))
    (define (sig j)
      (let ((k (- 21 j)))
        (sqrt (* k (+ k 1)))))
    (check-within (cadddr (svd a list))
                  #(20.4939015319192   19.493588689617948 3.5665073441521055e-27
                    18.49324200890693  17.492855684535876 16.492422502470617
                    15.491933384829649 14.491376746189422 13.49073756323204
                    12.489995996796784 11.489125293076066 10.48808848170151
                    9.486832980505142  8.48528137423857   7.483314773547884
                    3.4641016151377517 6.480740698407856  4.47213595499958
                    5.477225575051661  2.4494897427831783 1.414213562373095)
                  #;(build-vector 21 (Î» (x) (sig (+ x 1))))
                  1e-15))
   (test-case
    "Golub 2"
    ;;; From Golub and Reinsch in Wilkinson&Reinsch Handbook for Automatic
    ;;; Computation -- Linear Algebra Vol II, p.150.
    (define a
      (m:generate 30 30
                  (lambda (i j)
                    (cond ((> i j)  0.0)
                          ((= i j)  1.0)
                          ((< i j) -1.0)))))
    (check-within (cadddr (svd a list))
                  #(18.202905557529274 6.2231965226042325    3.9134802033356157 2.976794502557797
                    2.4904506296603617 2.7939677151340594e-9 2.2032075744799298 2.0191836540545935
                    1.8943415476856935 1.8059191266123142    1.7411357677479578 1.6923565443952688
                    1.654793027369345  1.6253208928779395    1.6018333566662764 1.5828695887137096
                    1.5673921444800174 1.55464889010938      1.5440847140760587 1.5352835655449113
                    1.5279295121603145 1.5217800390635037    1.5166474128367937 1.5123854738997016
                    1.508880156801892  1.5060426207239777    1.5038042438126578 1.5002314347754444
                    1.5021129767540111 1.5009307119770665)
                  1e-15))
   (test-case
    "Testing"
    (define (matnorm a)
      (apply max
             (map abs
                  (apply append 
                         (map vector->list 
                              (vector->list (matrix->array a)))))))
    (define (test n [m 100])
      (let ((h (hilbert n)))
        (println `(lu ,(matnorm
                           (matrix-matrix (matrix*matrix h (lu-invert h))
                                          (m:make-identity n)))))
        (svd h
             (lambda (u sigma v w)
               (let elp ((eps 1e-10) (m m))
                 (if (= m 0)
                     'done
                     (let ((inverted-w
                            (let ((wmin (* eps (apply max (vector->list w)))))
                              (build-vector (vector-length w)
                                                       (lambda (i) 
                                                         (let ((wi (vector-ref w i)))
                                                           (if (< wi wmin) 0 (/ 1 wi))))))))
                       (let ((inv
                              (matrix*matrix v
                                             (matrix*matrix (m:make-diagonal inverted-w)
                                                            (m:transpose u)))))
		   
                         (println `(svd ,eps
                                           ,(matnorm
                                             (matrix-matrix (matrix*matrix h inv)
                                                            (m:make-identity n))))))
			     
                       (elp (/ eps 3) (- m 1)))))))))
    #;(test 13)
    #;(test 19)
    #;(test 20)
    #;(test 30)

;;; Singular values for (hilbert 30) are:
    (check-within (cadddr (svd (hilbert 30) list))
                  #(1.6046959983598275     .3344360125333556      .05091302233254397
                    6.612384688874973e-3   7.527825195740986e-4   7.593680264534132e-5
                    6.834096698733383e-6   5.513422736482628e-7   4.000480673281162e-8
                    2.6164842785734506e-9  1.5446121110479932e-10 8.235086631801633e-12
                    3.964803127460767e-13  1.7223602006838723e-14 6.6921268878625e-16
                    2.4447558436546055e-17 9.074602910397975e-18  5.985016835530655e-18
                    5.7110319490636254e-18 1.1209774921001327e-17 7.86180746543282e-18
                    7.113462016773155e-18  5.4562440222629994e-18 3.964051053484464e-18
                    4.899374346302087e-18  3.7838677932677645e-18 3.1519489253291782e-18
                    2.852971370421691e-18  1.9386313723000905e-18 9.527265084040377e-19)
                  1e-15)
    )

#|  ;;; Testing

;;; Before 13 LU is better than SVD, but SVD eventually wins.

(test 13)
(lu .90625)
(svd .0000000001 .6675129055220168)
(svd 3.3333333333333335e-11 .6000871658325195)
(svd 1.1111111111111111e-11 .6000871658325195)
(svd 3.703703703703703e-12 .6000871658325195)
(svd 1.2345679012345677e-12 .5423380881547928)
(svd 4.115226337448559e-13 .5423380881547928)
(svd 1.371742112482853e-13 .5423380881547928)
(svd 4.572473708276176e-14 .5423380881547928)
(svd 1.5241579027587254e-14 .4376716613769531)
(svd 5.0805263425290845e-15 .4376716613769531)
(svd 1.6935087808430282e-15 .4376716613769531)
(svd 5.64502926947676e-16 .4376716613769531)
(svd 1.88167642315892e-16 .4376716613769531)

(svd 6.272254743863067e-17 .348388671875)

(svd 2.0907515812876892e-17 .348388671875)
(svd 6.96917193762563e-18 .348388671875)
(svd 2.3230573125418768e-18 2.515625)
(svd 7.74352437513959e-19 2.515625)
(svd 2.5811747917131964e-19 2.515625)
(svd 8.603915972377322e-20 2.515625)
(svd 2.867971990792441e-20 2.515625)
(svd 9.559906635974802e-21 2.515625)
(svd 3.186635545324934e-21 2.515625)
(svd 1.0622118484416447e-21 2.515625)
(svd 3.540706161472149e-22 2.515625)
(svd 1.180235387157383e-22 2.515625)
;Quit!


(test 19)
(lu 4.875)
(svd .0000000001 .7776952391723171)
(svd 3.3333333333333335e-11 .7395966090261936)
(svd 1.1111111111111111e-11 .7395966090261936)
(svd 3.703703703703703e-12 .7395966090261936)
(svd 1.2345679012345677e-12 .6962781026959419)
(svd 4.115226337448559e-13 .6962781026959419)
(svd 1.371742112482853e-13 .6962781026959419)
(svd 4.572473708276176e-14 .6577432155609131)
(svd 1.5241579027587254e-14 .6577432155609131)
(svd 5.0805263425290845e-15 .6577432155609131)
(svd 1.6935087808430282e-15 .6577432155609131)
(svd 5.64502926947676e-16 .5989990234375)
(svd 1.88167642315892e-16 .5989990234375)

(svd 6.272254743863067e-17 .5989990234375)

(svd 2.0907515812876892e-17 .90625)
(svd 6.96917193762563e-18 .90625)
(svd 2.3230573125418768e-18 22.3125)
(svd 7.74352437513959e-19 22.3125)
;Quit!


(test 20)
(lu 34.)
(svd .0000000001 .752550782635808)
(svd 3.3333333333333335e-11 .752550782635808)
(svd 1.1111111111111111e-11 .752550782635808)
(svd 3.703703703703703e-12 .752550782635808)
(svd 1.2345679012345677e-12 .7140587568283081)
(svd 4.115226337448559e-13 .7140587568283081)
(svd 1.371742112482853e-13 .7140587568283081)
(svd 4.572473708276176e-14 .6803770065307617)
(svd 1.5241579027587254e-14 .6803770065307617)
(svd 5.0805263425290845e-15 .6803770065307617)
(svd 1.6935087808430282e-15 .643280029296875)
(svd 5.64502926947676e-16 .643280029296875)
(svd 1.88167642315892e-16 .643280029296875)
(svd 6.272254743863067e-17 .643280029296875)

(svd 2.0907515812876892e-17 .59033203125)

(svd 6.96917193762563e-18 .59033203125)
(svd 2.3230573125418768e-18 13.)
(svd 7.74352437513959e-19 24.)
(svd 2.5811747917131964e-19 24.)
;Quit!


(test 30)
(lu 12.25)
(svd .0000000001 .8594314045330975)
(svd 3.3333333333333335e-11 .8390090614557266)
(svd 1.1111111111111111e-11 .8390090614557266)
(svd 3.703703703703703e-12 .8144026100635529)
(svd 1.2345679012345677e-12 .8144026100635529)
(svd 4.115226337448559e-13 .8144026100635529)
(svd 1.371742112482853e-13 .7979546785354614)
(svd 4.572473708276176e-14 .7979546785354614)
(svd 1.5241579027587254e-14 .7979546785354614)
(svd 5.0805263425290845e-15 .7774620056152344)
(svd 1.6935087808430282e-15 .7774620056152344)
(svd 5.64502926947676e-16 .7774620056152344)

(svd 1.88167642315892e-16 .7529296875)

(svd 6.272254743863067e-17 .7529296875)
(svd 2.0907515812876892e-17 .7529296875)
(svd 6.96917193762563e-18 5.703125)
(svd 2.3230573125418768e-18 13.203125)
(svd 7.74352437513959e-19 31.8125)
(svd 2.5811747917131964e-19 34.3359375)
;Quit!


;;; Singular values for (hilbert 30) are:

|#
   ))

(module+ test
  (require rackunit/text-ui)
  (run-tests the-tests))